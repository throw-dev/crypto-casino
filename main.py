import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiosend import CryptoPay
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
import sqlite3 as sql
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import random
from tools import *
from config import *

class states(StatesGroup): 
    bet = State()
cp = CryptoPay(CRYPTO_PAY_TOKEN)
bot = Bot(BOT_FATHER_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())



@dp.callback_query(F.data == "menu")
async def menu_call(callback: CallbackQuery, state: FSMContext):
	get_menu(callback.message.chat.id)
	
@dp.callback_query(F.data == "bet")
async def bet(callback: CallbackQuery, state: FSMContext):
	await callback.answer()
	await bot.send_message(callback.message.chat.id, """<b>üí∞ | –°–∫–æ–ª—å–∫–æ USDT –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?</b>
<blockquote>p.s. –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 0.02</blockquote>""")
	await state.set_state(states.bet)

@dp.message(F.text, states.bet)
async def getbet(message: Message, state: FSMContext):
	try:
		amount = float(message.text)
	except:
		return await bot.send_message(message.chat.id, """<b>‚ùå | –û—à–∏–±–∫–∞.</b> –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
<blockquote>p.s. –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è "1.23"</blockquote>""")
	if amount < 0.02:
		return await bot.send_message(message.chat.id, """<b>‚ùå | –û—à–∏–±–∫–∞.</b> –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é —Å—Ç–∞–≤–∫—É.
<blockquote>p.s. –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 0.02</blockquote>""")
	invoice = await cp.create_invoice(amount, "USDT", allow_anonymous=False, paid_btn_name="openChannel", paid_btn_url=channel_bets_link)
	await message.answer(f"""<b>‚úÖ | –í–∞—à —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω.</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏, —Ç–∞–º –≤–∞—Å –±—É–¥—É—Ç –æ–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã.

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: </b>{invoice.bot_invoice_url}
<b>üå† | –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: </b>{channel_bets_link}

<blockquote>–£–¥–∞—á–∏!</blockquote>""")
	invoice.poll(message=message)
	await state.clear()

@dp.callback_query(F.data == "agree_rules")
async def insert_user(callback: CallbackQuery):
	cursor.execute(f"INSERT INTO users (user_id, referal) VALUES (?,?)", (callback.message.chat.id, 0))
	conn.commit()
	await get_menu(callback.message.chat.id)
	await callback.message.delete()

@dp.message(Command("checks_opopo"))
async def chs(message: Message):
	checks = await cp.get_checks(status="active")
	for check in checks:
		await message.answer(check.bot_check_url)

@dp.message(Command("start"))
async def start(message: Message):
	player = await check_player(message)
	if player != None:
		await get_menu(player[1])

@cp.invoice_polling()
async def handle_payment(invoice, message: Message):
	msg = await bot.send_message(channel_bets, f"üí∏ | <b>–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂</b> {invoice.amount} {invoice.asset} –æ—Ç –∏–≥—Ä–æ–∫–∞ {message.from_user.first_name}. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
	com = invoice.comment
	stavka = f"{invoice.amount} {invoice.asset}"
	if com == None:
		check = await cp.create_check(invoice.amount, invoice.asset)
		await bot.send_message(message.from_user.id, check.bot_check_url)
		return await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
	args = com.split()
	if args[0].lower() == "–∫—É–±":
		try:
			if args[1].lower() == "—á–µ—Ç" or args[1].lower() == "—á—ë—Ç":
				win = [2, 4, 6]
				boost = 2
			elif args[1].lower() == "–Ω–µ—á–µ—Ç" or args[1].lower() == "–Ω–µ—á—ë—Ç":
				win = [1, 3, 5]
				boost = 2
			elif args[1].lower() == "–±–æ–ª—å—à–µ":
				win = [4,5]
				boost = 2
			elif args[1].lower() == "–º–µ–Ω—å—à–µ":
				win = [1,2]
				boost = 2
			elif args[1].lower() == "—Ä–∞–≤–Ω–æ":
				win = [3]
				boost = 2.5
			else:
				errmsg = await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
				await bot.forward_message(message.from_user.id, errmsg.chat.id, errmsg.message_id)
				che = await cp.create_check(invoice.amount, invoice.asset)
				builder = InlineKeyboardBuilder()
				builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
				return await bot.send_message(message.from_user.id, che.bot_check_url, reply_markup=builder.as_markup())
		except:
			errmsg = await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫—É–±. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
			await bot.forward_message(message.from_user.id, errmsg.chat.id, errmsg.message_id)
			che = await cp.create_check(invoice.amount, invoice.asset)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			return await bot.send_message(message.from_user.id, che.bot_check_url, reply_markup=builder.as_markup())
		dice = await msg.reply_dice(emoji="üé≤")
		await asyncio.sleep(5)
		if dice.dice.value in win:
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			check = await cp.create_check(invoice.amount*boost, invoice.asset)
			await bot.send_message(message.from_user.id, f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π!</b> –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ –ª–∏ –Ω–µ –ø–æ–≤–æ–¥ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É?

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —á–µ–∫ —Å –≤—ã–ø–ª–∞—Ç–æ–π: </b>{check.bot_check_url}

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{dice.dice.value}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à:
<blockquote>{invoice.amount * boost} {invoice.asset} (x{boost})</blockquote>

<b>üíµ | –ë–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º —á–µ–∫ –≤ <a href="{bot_link}">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a> –Ω–∞ —Å—É–º–º—É {invoice.amount * boost} {invoice.asset}.</b>""")
			await insert_game(message.from_user.id, args[0], invoice.amount, args[1], invoice.amount*boost)
		else:
			await create_ch(invoice.amount)
			await insert_game(message.from_user.id, args[0], invoice.amount, args[1], 0)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			
			await bot.send_message(message.from_user.id, """‚ùå | <b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{dice.dice.value}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>

<b>üíî | –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç.</b>""")
	elif args[0].lower() == "–±–∞—Å–∫–µ—Ç–±–æ–ª":
		dice = await msg.reply_dice(emoji="üèÄ")
		await asyncio.sleep(5)
		if dice.dice.value == 4:
			boost = 1.5
			iswin = True
			result = "–ù–∞ –≥—Ä–∞–Ω–∏ —Ñ–æ–ª–∞!"
		elif dice.dice.value == 5:
			boost = 2
			iswin = True
			result = "–í —Ç–æ—á–∫—É!"
		else:
			iswin = False
			result = "–ú–∏–º–æ!"
		
		if iswin:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=invoice.amount*boost)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			check = await cp.create_check(invoice.amount*boost, invoice.asset)
			await bot.send_message(message.from_user.id, f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π!</b> –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ –ª–∏ –Ω–µ –ø–æ–≤–æ–¥ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É?

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —á–µ–∫ —Å –≤—ã–ø–ª–∞—Ç–æ–π: </b>{check.bot_check_url}

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à:
<blockquote>{invoice.amount * boost} {invoice.asset} (x{boost})</blockquote>

<b>üíµ | –ë–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º —á–µ–∫ –≤ <a href="{bot_link}">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a> –Ω–∞ —Å—É–º–º—É {invoice.amount * boost} {invoice.asset}.</b>""")
		else:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=0)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			await create_ch(invoice.amount)
			await bot.send_message(message.from_user.id, """‚ùå | <b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>

<b>üíî | –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç.</b>""")
	
	elif args[0].lower() == "–±–æ—É–ª–∏–Ω–≥":
		dice = await msg.reply_dice(emoji="üé≥")
		await asyncio.sleep(5)
		iswin = False
		if dice.dice.value == 5:
			boost = 1.5
			iswin = True
			result = "–û–¥–Ω–∞ –∫–µ–≥–ª—è!"
		elif dice.dice.value == 6:
			boost = 2
			iswin = True
			result = "–°—Ç—Ä–∞–π–∫!"
		else:
			iswin = False
			result = "–ú–∏–º–æ!"
		
		if iswin:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=invoice.amount*boost)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			check = await cp.create_check(invoice.amount*boost, invoice.asset)
			await bot.send_message(message.from_user.id, f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π!</b> –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ –ª–∏ –Ω–µ –ø–æ–≤–æ–¥ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É?

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —á–µ–∫ —Å –≤—ã–ø–ª–∞—Ç–æ–π: </b>{check.bot_check_url}

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à:
<blockquote>{invoice.amount * boost} {invoice.asset} (x{boost})</blockquote>

<b>üíµ | –ë–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º —á–µ–∫ –≤ <a href="{bot_link}">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a> –Ω–∞ —Å—É–º–º—É {invoice.amount * boost} {invoice.asset}.</b>""")
		else:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=0)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			await create_ch(invoice.amount)
			await bot.send_message(message.from_user.id, """‚ùå | <b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>

<b>üíî | –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç.</b>""")
	elif args[0].lower() == "—Ñ—É—Ç–±–æ–ª":
		dice = await msg.reply_dice(emoji="‚öΩÔ∏è")
		await asyncio.sleep(5)
		iswin = False
		if dice.dice.value == 4:
			boost = 1.5
			iswin = True
			result = "–ù–∞ –≥—Ä–∞–Ω–∏ –ø—Ä–æ–º–∞—Ö–∞!"
		elif dice.dice.value == 5:
			boost = 2
			iswin = True
			result = "–ì–æ–ª!"
		else:
			iswin = False
			result = "–ú–∏–º–æ!"
		
		if iswin:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=invoice.amount*boost)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			check = await cp.create_check(invoice.amount*boost, invoice.asset)
			await bot.send_message(message.from_user.id, f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π!</b> –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ –ª–∏ –Ω–µ –ø–æ–≤–æ–¥ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É?

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —á–µ–∫ —Å –≤—ã–ø–ª–∞—Ç–æ–π: </b>{check.bot_check_url}

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à:
<blockquote>{invoice.amount * boost} {invoice.asset} (x{boost})</blockquote>

<b>üíµ | –ë–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º —á–µ–∫ –≤ <a href="{bot_link}">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a> –Ω–∞ —Å—É–º–º—É {invoice.amount * boost} {invoice.asset}.</b>""")
		else:
			await insert_game(message.from_user.id, args[0], bet=invoice.amount, win=0)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			await create_ch(invoice.amount)
			await bot.send_message(message.from_user.id, """‚ùå | <b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await dice.reply(f"""<b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>

<b>üíî | –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç.</b>""")
	elif args[0].lower() == "—Ä—É–ª–µ—Ç–∫–∞":
		try:
			if args[1].lower() == "–∫—Ä–∞—Å–Ω—ã–π" or args[1].lower() == "–∫":
				color = "üü•"
			elif args[1].lower() == "–∑–µ–ª–µ–Ω—ã–π" or args[1].lower() == "–∑–µ–ª—ë–Ω—ã–π" or args[1].lower() == "–∑" or args[1].lower() == "–∑–µ—Ä–æ":
				color = "üü©"
			elif args[1].lower() == "—á–µ—Ä–Ω—ã–π" or args[1].lower() == "—á—ë—Ä–Ω—ã–π" or args[1].lower() == "—á":
				color = "‚¨õÔ∏è"
			else:
				errmsg = await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
				await bot.forward_message(message.from_user.id, errmsg.chat.id, errmsg.message_id)
				che = await cp.create_check(invoice.amount, invoice.asset)
				builder = InlineKeyboardBuilder()
				builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
				return await bot.send_message(message.from_user.id, che.bot_check_url, reply_markup=builder.as_markup())
		except:
			errmsg = await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
			await bot.forward_message(message.from_user.id, errmsg.chat.id, errmsg.message_id)
			che = await cp.create_check(invoice.amount, invoice.asset)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			return await bot.send_message(message.from_user.id, che.bot_check_url, reply_markup=builder.as_markup())
		
		win = random.randint(1, 3)
		if win == 3 and color != "üü©":
			result = color
			boost = 2
		elif win == 3 and color == "üü©":
			win = random.randint(1,40)
			if win == 29:
				result = "üü©"
				boost = 5
			else:
				win = random.randint(1, 2)
				if win == 2:
					result = "‚¨õÔ∏è"
				else:
					result = "üü•"
		else:
			if color == "‚¨õÔ∏è":
				win = random.randint(1, 2)
				if win == 2:
					result = "üü©"
				else:
					result = "üü•"
			elif color == "üü©":
				win = random.randint(1, 2)
				if win == 2:
					result = "‚¨õÔ∏è"
				else:
					result = "üü•"
			else:
				win = random.randint(1, 2)
				if win == 2:
					result = "‚¨õÔ∏è"
				else:
					result = "üü©"

		roulette = await msg.reply("üëâüü•üëà")
		await asyncio.sleep(1)
		await roulette.edit_text("üëâ‚¨õÔ∏èüëà")
		await asyncio.sleep(1)
		await roulette.edit_text("üëâüü©üëà")
		await asyncio.sleep(1)
		await roulette.edit_text("üëâüü•üëà")
		await asyncio.sleep(1)
		await roulette.edit_text("üëâ‚¨õÔ∏èüëà")
		await asyncio.sleep(1)
		if result != "‚¨õÔ∏è":
			await roulette.edit_text(f"üëâ{result}üëà")
		if result == color:
			await insert_game(message.from_user.id, args[0], invoice.amount, args[1], invoice.amount*boost)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			check = await cp.create_check(invoice.amount*boost, invoice.asset)
			await bot.send_message(message.from_user.id, f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–±–µ–¥–æ–π!</b> –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ –ª–∏ –Ω–µ –ø–æ–≤–æ–¥ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É?

<b>üíµ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —á–µ–∫ —Å –≤—ã–ø–ª–∞—Ç–æ–π: </b>{check.bot_check_url}

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await roulette.reply(f"""<b>üéâ | –ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à:
<blockquote>{invoice.amount * boost} {invoice.asset} (x{boost})</blockquote>

<b>üíµ | –ë–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º —á–µ–∫ –≤ <a href="{bot_link}">–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a> –Ω–∞ —Å—É–º–º—É {invoice.amount * boost} {invoice.asset}.</b>""")
		else:
			await insert_game(message.from_user.id, args[0], invoice.amount, args[1], 0)
			builder = InlineKeyboardBuilder()
			builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
			await create_ch(invoice.amount)
			await bot.send_message(message.from_user.id, """‚ùå | <b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ.</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!

<blockquote>–í–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä–∞—Ç—å?</blockquote>""", reply_markup=builder.as_markup())
			await roulette.reply(f"""<b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>

–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
<blockquote>{com}</blockquote>
–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:
<blockquote>{result}</blockquote>
–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:
<blockquote>{stavka}</blockquote>

<b>üíî | –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç.</b>""")
	else:
		errmsg = await msg.reply(f"‚ùå | –û—à–∏–±–∫–∞. –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–≥—Ä—É. –ë–æ—Ç –≤—ã—Å–ª–∞–ª –≤—ã—Å–ª–∞–ª –≤–∞–º –≤–∞—à–∏ {invoice.amount} {invoice.asset} —á–µ–∫–æ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
		await bot.forward_message(message.from_user.id, errmsg.chat.id, errmsg.message_id)
		che = await cp.create_check(invoice.amount, invoice.asset)
		builder = InlineKeyboardBuilder()
		builder.add(types.InlineKeyboardButton(text="üí∏ | –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É", callback_data="bet"), types.InlineKeyboardButton(text="‚óÄÔ∏è | –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"))
		return await bot.send_message(message.from_user.id, che.bot_check_url, reply_markup=builder.as_markup())
	
async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        cp.start_polling(),
    )
    print("started succes")

if __name__ == "__main__":
    asyncio.run(main())